---
AWSTemplateFormatVersion: '2010-09-09'

Conditions:
  ApiDomainNameSpecified: !Not [!Equals [!Ref ApiDomainName, ""]]
  NotificationEmailSpecified: !Not [!Equals [!Ref NotificationEmail, ""]]
  NotificationNumberSpecified: !Not [!Equals [!Ref NotificationNumber, ""]]

Globals:
  Function:
    Environment:
      Variables:
        NOTIFICATION_TOPIC: !Ref NotificationTopic
    Handler: handler
    Runtime: go1.x
    Timeout: 5
    Tracing: Active

Outputs:
  ApiDistributionDomainName:
    Condition: ApiDomainNameSpecified
    Value: !GetAtt ApiGatewayDomainName.DistributionDomainName

  ApiUrl:
    Value:
      !If
      - ApiDomainNameSpecified
      - !Sub https://${ApiDomainName}
      - !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/${ServerlessRestApiProdStage}"

Parameters:
  ApiDomainName:
    Default: ""
    Type: String

  NotificationEmail:
    Default: ""
    Type: String

  NotificationNumber:
    Default: ""
    Type: String

Resources:
  ApiGatewayCertificate:
    Condition: ApiDomainNameSpecified
    Properties:
      DomainName: !Ref ApiDomainName
    Type: AWS::CertificateManager::Certificate

  ApiGatewayDomainName:
    Condition: ApiDomainNameSpecified
    Properties:
      CertificateArn: !Ref ApiGatewayCertificate
      DomainName: !Ref ApiDomainName
    Type: AWS::ApiGateway::DomainName

  ApiGatewayMapping:
    Condition: ApiDomainNameSpecified
    Properties:
      DomainName: !Ref ApiGatewayDomainName
      RestApiId: !Ref ServerlessRestApi
      Stage: !Ref ServerlessRestApiProdStage
    Type: AWS::ApiGateway::BasePathMapping

  Bucket:
    Type: AWS::S3::Bucket

  DashboardFunction:
    Properties:
      CodeUri: ./handlers/dashboard/handler.zip
      Environment:
        Variables:
          CLIENT_ID: "id"
          CLIENT_SECRET: "secret"
      Events:
        Request:
          Properties:
            Method: GET
            Path: /
          Type: Api
      FunctionName: !Sub ${AWS::StackName}-DashboardFunction
      Handler: handler
      Policies:
        - SNSPublishMessagePolicy:
            TopicName: !Ref NotificationTopic
      Runtime: go1.x
    Type: AWS::Serverless::Function

  Key:
    Properties:
      KeyPolicy:
        Id: default
        Statement:
          - Action: kms:*
            Effect: Allow
            Principal:
              AWS: !Sub arn:aws:iam::${AWS::AccountId}:root
            Resource: '*'
            Sid: Enable IAM User Permissions
        Version: 2012-10-17
    Type: AWS::KMS::Key

  NotificationTopic:
    Properties:
      DisplayName: Notification
      Subscription:
        - !If
          - NotificationEmailSpecified
          - Endpoint: !Ref NotificationEmail
            Protocol: email
          - !Ref AWS::NoValue
        - !If
          - NotificationNumberSpecified
          - Endpoint: !Ref NotificationNumber
            Protocol: sms
          - !Ref AWS::NoValue
      TopicName: Notification
    Type: AWS::SNS::Topic

  UserCreateFunction:
    Properties:
      CodeUri: ./handlers/user-create/handler.zip
      Environment:
        Variables:
          KEY_ID: !Ref Key
          TABLE_NAME: !Ref UsersTable
      Events:
        Request:
          Properties:
            Method: POST
            Path: /users
          Type: Api
      FunctionName: !Sub ${AWS::StackName}-UserCreateFunction
      Handler: handler
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref UsersTable
        - Statement:
            - Action:
                - kms:Encrypt
              Effect: Allow
              Resource: !GetAtt Key.Arn
          Version: 2012-10-17
      Runtime: go1.x
    Type: AWS::Serverless::Function

  UserReadFunction:
    Properties:
      CodeUri: ./handlers/user-read/handler.zip
      Environment:
        Variables:
          KEY_ID: !Ref Key
          TABLE_NAME: !Ref UsersTable
      Events:
        Request:
          Properties:
            Method: GET
            Path: /users/{id}
          Type: Api
      FunctionName: !Sub ${AWS::StackName}-UserReadFunction
      Handler: handler
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref UsersTable
        - KMSDecryptPolicy:
            KeyId: !Ref Key
      Runtime: go1.x
    Type: AWS::Serverless::Function

  UserUpdateFunction:
    Properties:
      CodeUri: ./handlers/user-update/handler.zip
      Environment:
        Variables:
          KEY_ID: !Ref Key
          TABLE_NAME: !Ref UsersTable
      Events:
        Request:
          Properties:
            Method: POST
            Path: /users/{id}
          Type: Api
      FunctionName: !Sub ${AWS::StackName}-UserUpdateFunction
      Handler: handler
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref UsersTable
        - Statement:
            - Action:
                - kms:Encrypt
              Effect: Allow
              Resource: !GetAtt Key.Arn
          Version: 2012-10-17
      Runtime: go1.x
    Type: AWS::Serverless::Function

  UsersTable:
    Properties:
      ProvisionedThroughput:
        ReadCapacityUnits: 1
        WriteCapacityUnits: 1
    Type: AWS::Serverless::SimpleTable

  WorkerFunction:
    Properties:
      CodeUri: ./handlers/worker/handler.zip
      Environment:
        Variables:
          BUCKET: !Ref Bucket
      FunctionName: !Sub ${AWS::StackName}-WorkerFunction
      Handler: handler
      Policies:
        - S3CrudPolicy:
            BucketName: !Ref Bucket
      Runtime: go1.x
    Type: AWS::Serverless::Function

  WorkerPeriodicFunction:
    Properties:
      CodeUri: ./handlers/worker-periodic/handler.zip
      Environment:
        Variables:
          BUCKET: !Ref Bucket
      Events:
        Request:
          Properties:
            Pattern:
              source: ["aws.events"]
          Type: CloudWatchEvent
      FunctionName: !Sub ${AWS::StackName}-WorkerPeriodicFunction
      Handler: handler
      Policies:
        - AmazonS3FullAccess
      Runtime: go1.x
    Type: AWS::Serverless::Function

  WorkerPeriodicPermission:
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref WorkerPeriodicFunction
      Principal: events.amazonaws.com
      SourceArn: !GetAtt WorkerPeriodicRule.Arn
    Type: AWS::Lambda::Permission

  WorkerPeriodicRule:
    Properties:
      Description: ScheduledRule
      ScheduleExpression: "rate(1 day)"
      State: ENABLED
      Targets:
        - Arn: !GetAtt WorkerPeriodicFunction.Arn
          Id: WorkerPeriodicFunction
    Type: AWS::Events::Rule

Transform: AWS::Serverless-2016-10-31
