---
AWSTemplateFormatVersion: '2010-09-09'

Outputs:
  URL:
    Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/${ServerlessRestApiProdStage}"

Resources:
  Bucket:
    Type: AWS::S3::Bucket

  DashboardFunction:
    Properties:
      CodeUri: ./handlers/dashboard/handler.zip
      Environment:
        Variables:
          CLIENT_ID: "id"
          CLIENT_SECRET: "secret"
      Events:
        Request:
          Properties:
            Method: GET
            Path: /
          Type: Api
      Handler: handler
      Runtime: go1.x
      Timeout: 5
      Tracing: Active
    Type: AWS::Serverless::Function

  WorkerFunction:
    Properties:
      CodeUri: ./handlers/worker/handler.zip
      Environment:
        Variables:
          BUCKET: !Ref Bucket
      Handler: handler
      Policies:
        - S3CrudPolicy:
            BucketName: !Ref Bucket
      Runtime: go1.x
      Timeout: 5
      Tracing: Active
    Type: AWS::Serverless::Function

  WorkerPeriodicFunction:
    Properties:
      CodeUri: ./handlers/worker-periodic/handler.zip
      Environment:
        Variables:
          BUCKET: !Ref Bucket
      Events:
        Request:
          Properties:
            Pattern:
              source: ["aws.events"]
          Type: CloudWatchEvent
      Handler: handler
      Policies:
        - AmazonS3FullAccess
      Runtime: go1.x
      Timeout: 5
      Tracing: Active
    Type: AWS::Serverless::Function

  WorkerPeriodicPermission:
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref WorkerPeriodicFunction
      Principal: events.amazonaws.com
      SourceArn: !GetAtt WorkerPeriodicRule.Arn
    Type: AWS::Lambda::Permission

  WorkerPeriodicRule:
    Properties:
      Description: ScheduledRule
      ScheduleExpression: "rate(1 minute)"
      State: ENABLED
      Targets:
        - Arn: !GetAtt WorkerPeriodicFunction.Arn
          Id: WorkerPeriodicFunction
    Type: AWS::Events::Rule

Transform: AWS::Serverless-2016-10-31
