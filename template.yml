---
AWSTemplateFormatVersion: '2010-09-09'

Conditions:
  ApiDomainNameSpecified: !Not [!Equals [!Ref ApiDomainName, ""]]

Globals:
  Function:
    Handler: handler
    Runtime: go1.x
    Timeout: 5
    Tracing: Active

Outputs:
  URL:
    Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/${ServerlessRestApiProdStage}"

Parameters:
  ApiDomainName:
    Default: ""
    Type: String

Resources:
  ApiGatewayCertificate:
    Condition: ApiDomainNameSpecified
    Properties:
      DomainName: !Ref ApiDomainName
    Type: AWS::CertificateManager::Certificate

  ApiGatewayDomainName:
    Condition: ApiDomainNameSpecified
    Properties:
      CertificateArn: !Ref ApiGatewayCertificate
      DomainName: !Ref ApiDomainName
    Type: AWS::ApiGateway::DomainName

  ApiGatewayMapping:
    Condition: ApiDomainNameSpecified
    Properties:
      DomainName: !Ref ApiGatewayDomainName
      RestApiId: !Ref ServerlessRestApi
      Stage: !Ref ServerlessRestApiProdStage
    Type: AWS::ApiGateway::BasePathMapping

  Bucket:
    Type: AWS::S3::Bucket

  DashboardFunction:
    Properties:
      CodeUri: ./handlers/dashboard/handler.zip
      Environment:
        Variables:
          CLIENT_ID: "id"
          CLIENT_SECRET: "secret"
      Events:
        Request:
          Properties:
            Method: GET
            Path: /
          Type: Api
    Type: AWS::Serverless::Function

  WorkerFunction:
    Properties:
      CodeUri: ./handlers/worker/handler.zip
      Environment:
        Variables:
          BUCKET: !Ref Bucket
      Policies:
        - S3CrudPolicy:
            BucketName: !Ref Bucket
    Type: AWS::Serverless::Function

  WorkerPeriodicFunction:
    Properties:
      CodeUri: ./handlers/worker-periodic/handler.zip
      Environment:
        Variables:
          BUCKET: !Ref Bucket
      Events:
        Request:
          Properties:
            Pattern:
              source: ["aws.events"]
          Type: CloudWatchEvent
      Policies:
        - AmazonS3FullAccess
    Type: AWS::Serverless::Function

  WorkerPeriodicPermission:
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref WorkerPeriodicFunction
      Principal: events.amazonaws.com
      SourceArn: !GetAtt WorkerPeriodicRule.Arn
    Type: AWS::Lambda::Permission

  WorkerPeriodicRule:
    Properties:
      Description: ScheduledRule
      ScheduleExpression: "rate(1 day)"
      State: ENABLED
      Targets:
        - Arn: !GetAtt WorkerPeriodicFunction.Arn
          Id: WorkerPeriodicFunction
    Type: AWS::Events::Rule

Transform: AWS::Serverless-2016-10-31
